generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String   @unique(map: "users_email_idx")
  password  String
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

model Village {
  id        Int             @id @default(autoincrement())
  name      String
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  orders    Order[]
  members   VillageMember[]

  @@map("villages")
}

model VillageMember {
  id        Int      @id @default(autoincrement())
  name      String
  villageId Int      @map("village_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  village   Village  @relation(fields: [villageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("village_members")
}

model MenuCategory {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @map("updated_at") @db.Timestamptz(6)
  menuItems MenuItem[]

  @@map("menu_categories")
}

model MenuItem {
  id                    Int          @id @default(autoincrement())
  name                  String
  description           String?
  categoryId            Int          @map("category_id")
  imagePath             String?      @map("image_path")
  isTemperatureRequired Boolean      @default(false) @map("is_temperature_required")
  createdAt             DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime     @default(now()) @map("updated_at") @db.Timestamptz(6)
  category              MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders                Order[]

  @@map("menu_items")
}

model Order {
  id           Int      @id @default(autoincrement())
  villageId    Int      @map("village_id")
  memberName   String   @map("member_name")
  isCustomName Boolean  @default(false) @map("is_custom_name")
  menuItemId   Int      @map("menu_item_id")
  temperature  String?
  status       String   @default("pending")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  isMild       Boolean  @default(false) @map("is_mild")
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  village      Village  @relation(fields: [villageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("orders")
}

model CafeSetting {
  id          Int      @id @default(autoincrement())
  openingTime DateTime @default(dbgenerated("'10:00:00'::time without time zone")) @map("opening_time") @db.Time(6)
  closingTime DateTime @default(dbgenerated("'14:00:00'::time without time zone")) @map("closing_time") @db.Time(6)
  openDays    Int[]    @default([0]) @map("open_days")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("cafe_settings")
}

model cron_logs {
  id            Int       @id @default(autoincrement())
  job_name      String
  executed_at   DateTime  @db.Timestamptz(6)
  affected_rows Int?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}
